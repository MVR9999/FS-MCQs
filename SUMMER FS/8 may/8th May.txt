program-1

Koko loves to eat bananas.  There are N piles of bananas, the i-th pile has
piles[i] bananas.  The guards have gone and will come back in H hours.

Koko can decide her bananas-per-hour eating speed of K.  Each hour, she chooses
some pile of bananas, and eats K bananas from that pile.  If the pile has less
than K bananas, she eats all of them instead, and won't eat any more bananas
during this hour.

Koko likes to eat slowly, but still wants to finish eating all the bananas
before the guards come back.

Return the minimum integer K such that she can eat all the bananas within H hours.

 
input =
4
3 6 7 11
8
output =
4

input =5
30 11 23 4 20
5
output =30

input = 5
30 11 23 4 20
6
output =23

//backend testcases
case = 1
input =7
3 6 7 11 8 2 5
15

output =4
case = 2
input = 5
30 11 23 4 20
6
output =23
case = 3
input =5
30 11 23 4 20
5
output =30
case = 4
input =4
3 6 7 11
8
output =
4



Program-2

Jack and Daniel are friends. Both of them like letters, especially upper-case ones.
They are cutting upper-case letters from newspapers, and each one of them has his collection of letters stored in a stack.

One beautiful day, Morgan visited Jack and Daniel. He saw their collections. He wondered what is the lexicographically minimal string made of those two collections. He can take a letter from a collection only when it is on the top of the stack. Morgan wants to use all of the letters in their collections.

As an example, assume Jack has collected a={A,C,A} and Daniel has b={B,C,F} . The example shows the top at index  for each stack of letters. Assembling the string would go as follows:

input = 
ACA
BCF


Jack	Daniel	result
ACA  	BCF
CA  	BCF	A
CA	CF	AB
A	CF	ABC
A	CF	ABCA
    	F	ABCAC
    		ABCACF

Note the choice when there was a tie at CA and CF.

Input Format
 
- The first line contains string a
- The second line contains string b.

Output the lexicographically minimal string

Sample Input
JACK
DANIEL

Sample Output
DAJACKNIEL

Explanation

The first letters to choose from were J and D since they were at the top of the stack. D was chosen, the options then were J and A. A chosen. Then the two stacks have J and N, so J is chosen. (Current string is DAJ) Continuing this way till the end gives us the resulting string.



//backend testcases
case = 1
input =
JACK
DANIEL
output =
DAJACKNIEL
case = 2
input =
ABACABA
ABACABA
output =
AABABACABACABA
case = 3
input =
AAAAAAAABBBB
AAAAAAAACCCC
output =AAAAAAAAAAAAAAAABBBBCCCC
case = 4
input =ACA
BCF
output =
ABCACF


program-3

International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: "a" maps to ".-", "b" maps to "-...", "c" maps to "-.-.", and so on.

For convenience, the full table for the 26 letters of the English alphabet is given below:

[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]

Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter.

For example, "cba" can be written as "-.-.-....-", (which is the concatenation "-.-." + "-..." + ".-"). We'll call such a concatenation, the transformation of a word.

Return the number of different transformations among all words we have.


input =4
gin zen gig msg
output =2



Explanation: 
Input: words = ["gin", "zen", "gig", "msg"]

The transformation of each word is:
"gin" -> "--...-."
"zen" -> "--...-."
"gig" -> "--...--."
"msg" -> "--...--."

There are 2 different transformations, "--...-." and "--...--.".
so Output: 2

Note:
The length of words will be at most 100.
Each words[i] will have length in range [1, 12].
words[i] will only consist of lowercase letters.


//backend testcases:
case = 1
input =4
gin zen gig msg
output =2
case = 2
input =7
abc def ghi jkl mnop qrs mno
output =7
case = 3
input =3
aaa bbb aac
output =3
case = 4
input =2
kmit ngit
output =2
case = 5
input =10
keshav memorial institute of technology neil gogte institute of technology
output =7


program-1

Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.

input =5
3 1 4 1 5
2
output =2

Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.

Example 2:
input =5
1 2 3 4 5
1
output =4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).

Example 3:
input =5
1 3 1 5 4
0
output =1
Explanation: There is one 0-diff pair in the array, (1, 1).


//backend testcases:
case = 1
input =5
1 3 1 5 4
0
output =1
case = 2
input =5
1 2 3 4 5
1
output =4
case = 3
input =5
3 1 4 1 5
2
output =2

3 1
1 2
4 1
5 1



program-2

Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.

Note: output should be displayed in sorted order
input =2-1-1
output =0 2

Explanation: 
((2-1)-1) = 0 
(2-(1-1)) = 2

Example 2:
input =2*3-4*5
output =-34 -14 -10 -10 10
-34 -14 -10 -10 10

Explanation: 
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10

//backend testcases:

case = 1
input =2*3-4*5
output =-34 -14 -10 -10 10

case = 2
input =2-1-1
output =0 2

case = 3
input =10+2-5*5+3+3
output =-43 -43 -43 -43 -31 -31 -25 -25 -25 -23 -23 -19 -19 -19 -19 -13 -13 -13 -11 -11 -7 -7 -7 -7 -7 -7 -7 1 1 1 1 1 41 41 41 41 59 59 77 77 77 77

case = 4
input =1+2
output =3



program-3

X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X.  Each digit must be rotated - we cannot choose to leave it alone.

A number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other (on this case they are rotated in a different direction, in other words 2 or 5 gets mirrored); 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid.

Now given a positive number N, how many numbers X from 1 to N are good?

Example:
Input: 10
Output: 4
Explanation: 
There are four good numbers in the range [1, 10] : 2, 5, 6, 9.
Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.
Note:

//backend testcase:
case = 1
input =10
output =4
case = 2
input =15
output =6
case = 3
input =50
output =16
case = 4
input =200
output =81


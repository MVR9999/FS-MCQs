Given a matrix of dimension r*c where each cell in the matrix can have values 
0, 1 or 2 which has the following meaning:

0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

Assume the input matrix will contain only one of this three values(0/1/2)

So, we have to determine what is the minimum time required to rot all oranges. 
A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], 
[i,j+1] (up, down, left and right) in unit time.
If it is impossible to rot every orange then simply return -1.

Input:
Each test case contains two integers r and c, where r is the number of rows and c is the number of columns in the array a[]. 
Next line contains space separated r*c elements each in the array a[].

Output:
Print an integer which denotes the minimum time taken to rot all the oranges (-1 if it is impossible).

input =
3 5
2 1 0 2 1 1 0 1 2 1 1 0 0 2 1
output = 2


Explanation:
Testcase 1:
2 | 1 | 0 | 2 | 1
1 | 0 | 1 | 2 | 1
1 | 0 | 0 | 2 | 1

Oranges at positions {0,0}, {0, 3}, {1, 3} and {2, 3} will rot oranges at {0, 1}, {1, 0}, {0, 4},
{1, 2}, {1, 4}, {2, 4} during 1st unit time. 
And, during 2nd unit time, orange at {1, 0} got rotten and will rot orange at {2, 0}. 
Hence, total 2 unit of time is required to rot all oranges.



input =
3 5
2 1 0 2 1 0 0 1 2 1 1 0 0 2 1
output = -1


back end test cases

case = 1
input = 3 3
2 2 2 2 2 2 2 2 2
output = 0


case = 2
input = 3 3
1 1 1 0 0 0 1 1 1
output = -1

case = 3
input = 3 4
1 1 0 2 1 1 0 2 1 1 0 2
output = -1

case = 4
input = 2 2
2 1 0 1
output = 2
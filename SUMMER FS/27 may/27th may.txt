program1

Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:

Element at grid[i][j] moves to grid[i][j + 1].
Element at grid[i][n - 1] moves to grid[i + 1][0].
Element at grid[m - 1][n - 1] moves to grid[0][0].
Return the 2D grid after applying shift operation k times.

input =3
3
1 2 3
4 5 6
7 8 9
1
output =
9 1 2
3 4 5
6 7 8

first and second line reads the mXn values(size of matrix)
second line onwards elements of matrix
finally read the k value

//backend testcases:
case =1
input =3
3
1 2 3
4 5 6
7 8 9
1
output =9 1 2
3 4 5
6 7 8
case = 2
input =2
3
1 2 3
4 5 6
2
output =5 6 1
2 3 4
case = 3
input =3
3
1 2 3
4 5 6
7 8 9
7
output =3 4 5
6 7 8
9 1 2
case = 4
input =2
2
4 3
2 1
3
output =3 2
1 4


Program2

A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).
Find all strobogrammatic numbers that are of length = n.

Example:
input =2
output =11 69 88 96

input =3
output =101 111 181 609 619 689 808 818 888 906 916 986

//backend testcases:
case =1
input =2
output =11 69 88 96
case = 2
input =3
output =101 111 181 609 619 689 808 818 888 906 916 986
case = 3
input = 1
output = 0 1 8
case = 4
input = 4
output =1001 1111 1691 1881 1961 6009 6119 6699 6889 6969 8008 8118 8698 8888 8968 9006 9116 9696 9886 9966



program-3

Find the nth digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...
Note:
n is positive and will fit within the range of a 32-bit signed integer (n < 231).

input =3
output =3

input =11
output =0

Explanation:
The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.

//backend testcases:
case = 1
input =3
output =3
case = 2
input =11
output =0
case = 3
input =213
output =7
case = 4
input =270
output =6

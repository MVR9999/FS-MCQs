Program1

In a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

1) The town judge trusts nobody.
2) Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.

 

Example 1:
input =2
1
1 2
output =2

first line reads the number of people
second line reads the number of trust pairs
third line onwards trust pairs

N = 2, 
trust = [[1,2]]
here only two people and 1 trusts 2. so output is 2


input =3
2
1 3
2 3
output =3

here 3 people, no of pairs are 2 and followed by two pairs 
1 trusts 3 
2 trusts 3
all the people trusts 3 so town judge is 3
so output is 3

input =3
3
1 3
2 3
3 1
output = -1
here 3 people
1 trusts 3
2 trusts 3
3 trusts 1
all the people trusts 3. but 3 trusts 1..Therefore, 3 can't be the town judge.

input =5
7
1 3
2 3
4 3
4 1
5 3
5 1
5 4
output =3
the town judge is 3, because they are trusted by all four other people; 1, 2, 4, and 5, but they don't trust anybody themselves.
so town judge 3

input =5
2 1
3 1
4 2
4 3
5 1
output =-1
there is no town judge. Nobody is trusted by everybody else.

input =5
6
1 4
2 4
3 2
3 4
4 2
5 4
output =-1
there is also no town judge. While 4 is trusted by everybody, 4 themselves trusts 2. Therefore, 4 can't be the town judge.

//backend testcases
case = 1
input =5
6
1 4
2 4
3 2
3 4
4 2
5 4
output =-1
case = 2
input =5
7
1 3
2 3
4 3
4 1
5 3
5 1
5 4
output =3
case = 3
input =3
3
1 3
2 3
3 1
output =-1
case = 4
input =3
2
1 3
2 3
output =3
case = 5
input =2
1
1 2
output =2


program-2

On the first row, we write a 0. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.

Given row N and index K, return the K-th indexed symbol in row N. (The values of K are 1-indexed.) (1 indexed).

input =1
1
output =0
N = 1, K = 1
output: 0

input =2
1
output =0

input: N = 2, K = 1
Output: 0

input =4
5
output =1

Input: N = 4, K = 5
Output: 1

Explanation:
row 1: 0
row 2: 01
row 3: 0110
row 4: 01101001
row 5: 0110100110010110

//backend testcases:
case = 1
input =4
5
output =1
case = 2
input =2
1
output =0
case = 3
input =1
1
output =0
case = 4
input =5
14
output =1


program-3

Given a positive integer a, find the smallest positive integer b whose multiplication of each digit equals to a.

If there is no answer or the answer is not fit in 32-bit signed integer, then return 0.

Example 1
Input:

48 
Output:
68
Example 2
Input:
15
Output:
35


//backend testcases:
case = 1
input =48
output =68
case = 2
input =15
output =35
case = 3
input =45
output =59
case = 4
input =144
output =289
case = 5
input =121
output =0

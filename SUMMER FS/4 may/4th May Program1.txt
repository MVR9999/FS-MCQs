Program-1


Sundar works in a farm belongs to Mr.Vikas Oberoi. 
On the occasion Sundar's Birthday, Mr Vikas Oberoi planned to give a gift to Sundar. 

Mr.Vikas Oberoi offered all the fruits that Sundar can collects in one go 
from the right side of the farm returning back to the same side, 
such that he can take exactly 2 left turns. 

Sundar can start plucking from any cell A[i][N] where 1 <=i <= N. 
The farm is represented as a 2D matrix, each cell consisting of some units of fruit.

Sundar wants to collect as much amount of fruits as possible,
but he is illiterate, so he needs your help to get more fruits.

Please refer to the image below for more clarification on how to traverse the farm. 

Input Format
------------
first line consists of 2 space separated integers N and M, 
denoting the dimension of the farm.
The next N lines consist of M space separated integers 
each denoting the amount of dragon fruit in the cell.

Output Format
-------------
Output a single integer denoting the maximum amount of fruit Sundar could collect.

Sample-1:
    Input:
        3 3
        1 2 3
        3 3 1
        4 1 6
    Output:
        20

    Explanation:
		1<-2<-3
		|
		3 3 1
		|
		4->1->6
    Sundar starts from "3" and takes 1st left turn at "1" and takes 
    2nd left turn at "4" and reaches "6".
    so, the number of fruits he collects is 3 + 2 + 1 + 3 + 4 + 1 + 6 = 20



Sample-2:
    Input:
        3 3
        3 7 4
        1 9 6
        1 7 7
    Output:
        34
    
    Explanation:
		3 7<-4
		  |
		1 9 6
		  |
		1 7->7
    Sundar starts from "4" and takes 1st left turn at "7" and takes 
    2nd left turn at "7" and reaches "7".
    so, the number of fruits he collects is 4 + 7 + 9 + 7 + 7 = 34


import java.util.*;

public class OldFarmer {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);

		int nRows, nCols;
		nRows = sc.nextInt();
		nCols = sc.nextInt();

		//read the fruits for each cell of the farm
		int[][] fruitsInFarmCell = new int[nRows][nCols];
		for (int i = 0; i < nRows; i++) {
			for (int j = 0; j < nCols; j++) {
				fruitsInFarmCell[i][j] = sc.nextInt();
			}
		}
		//calculate row cumulate matrix from farm
		int[][] row_cumulate = new int[nRows][nCols];
		for (int i = 0; i < nRows; i++) {
			int sum = 0;
			for (int j = 0; j < nCols; j++) {
				row_cumulate[i][j] = sum + fruitsInFarmCell[i][j];
				sum = row_cumulate[i][j];
			}
		}
		//calculate column cumulate matrix from farm
		int[][] column_cumulate = new int[nRows][nCols];
		for (int i = 0; i < nCols; i++) {
			int sum = 0;
			for (int j = 0; j < nRows; j++) {
				column_cumulate[j][i] = sum + fruitsInFarmCell[j][i];
				sum = column_cumulate[j][i];
			}
		}
		
		int maxFruits = 0;
		for (int i = 0; i < nRows; i++) {
			for (int j = i + 1; j < nRows; j++) {
				for (int k = 0; k < nCols - 1; k++) {
					//Ranjan farmer starts from i,nCols-1 cell and stops at j,nCols-1 cell. in between he takes two lefts
					//and collects all the fruits on his way.
					//the above process will continue till he finds maximum fruits in the farm.
					
					int straightLineFruits = row_cumulate[i][nCols - 1] - row_cumulate[i][k] + fruitsInFarmCell[i][k];
					int firstLeftLineFruits = column_cumulate[j][k] - column_cumulate[i][k] - fruitsInFarmCell[j][k];
					int secondLeftLineFruits = row_cumulate[j][nCols - 1] - row_cumulate[j][k] + fruitsInFarmCell[j][k];
					//sum all the fruits collects in three his ways. 
					int allCollectedFruits = straightLineFruits + firstLeftLineFruits + secondLeftLineFruits;
					//update the maximum fruits based on current collected fruits.
					if (allCollectedFruits > maxFruits) {
						maxFruits = allCollectedFruits;
					}
				}//end of k=0 loop
			}// end of j = i+1 loop
		}// end of i=0 loop
		//display the maximum number of collected fruits.
		System.out.println(maxFruits);

	}
}



back end test cases
case = 1
input = 3 3
3 7 4
1 9 6
1 7 7
output =34

case = 2
input = 3 3
1 2 3
3 3 1
4 1 6
output = 20

case = 3
input = 3 3
output =
3 2 1
1 3 4
6 1 4
output = 19

case = 4
input = 3 3
3 3 3
4 4 4
5 5 5
output = 28
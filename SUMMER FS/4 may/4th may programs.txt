
program-1

A valid parentheses string is either empty (""), "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.  For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.

A valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string S, consider its primitive decomposition: S = P_1 + P_2 + ... + P_k, where P_i are primitive valid parentheses strings.

Return S after removing the outermost parentheses of every primitive string in the primitive decomposition of S.

 

input =(()())(())
output =()()()

Explanation: 
The input string is "(()())(())", with primitive decomposition "(()())" + "(())".
After removing outer parentheses of each part, this is "()()" + "()" = "()()()".


Example 2:

input =(()())(())(()(()))
output =()()()()(())

Explanation: 
The input string is "(()())(())(()(()))", with primitive decomposition "(()())" + "(())" + "(()(()))".
After removing outer parentheses of each part, this is "()()" + "()" + "()(())" = "()()()()(())".


Example 3:
input =()()
output =""


Explanation: 
The input string is "()()", with primitive decomposition "()" + "()".
After removing outer parentheses of each part, this is "" + "" = "".

//backend testcases:
case = 1
input =(()())(())
output =()()()
case = 2
input =(()())(())(()(()))
output =()()()()(())
case = 3
input =()()
output =""
case = 4
input =(()((())))(())(()(()))
output =()((()))()()(())




program-2

Given a string s. Return all the words vertically in the same order in which they appear in s.
Words are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).
Each word would be put on only one column and that in one column there will be only one word.


input =HOW ARE YOU
output =
HAY
ORO
WEU

Explanation: Each word is printed vertically. 
 "HAY"
 "ORO"
 "WEU"

Example 2:
input =TO BE OR NOT TO BE
output =
TBONTB
OEROOE
   T
Explanation: Trailing spaces is not allowed. 
"TBONTB"
"OEROOE"
"   T"


input =CONTEST IS COMING
output =
CIC
OSO
N M
T I
E N
S G
T
//backend testcases:
case = 1
input =CONTEST IS COMING
output =
CIC
OSO
N M
T I
E N
S G
T
case = 2
input =TO BE OR NOT TO BE
output =
TBONTB
OEROOE
   T
case = 3
input =HOW ARE YOU
output =
HAY
ORO
WEU



program-3

Given a square  matrix grid Return the number of negative numbers in grid.
 

input =4
4 3 2 -1
3 2 1 -1
1 1 -1 -2
-1 -1 -2 -3
output =8

Explanation: There are 8 negatives number in the matrix.

input =2
3 2
1 0
output =0

input =2
1 -1
-1 -1
output =3

input =1
-1
output =1
 


//backend testcases
case = 1
input =2
3 2
1 0
output =0
case = 2
input =2
1 -1
-1 -1
output =3
case = 3
input =1
-1
output =1
case = 4
input =4
4 3 2 -1
3 2 1 -1
1 1 -1 -2
-1 -1 -2 -3
output =8
case = 5
input =5
1 2 3 4 5
-1 -2 -3 -4 -5
5 6 7 8 9
-5 -6 -7 -8 -9
9 10 11 12 13
output =10